# How to map between papers and authors and vice versa

We will be referring to these files on Globus: <a href="https://app.globus.org/file-manager?origin_id=1ef9019c-eac0-11ed-9ba9-c9bb788c490e&origin_path=%2F~%2Fsemantic_scholar%2Freleases%2F2023-06-20%2Fdatabase%2Fpapers%2Fauthors%2F">here<a>.

If you has access to the Northeastern cluster, these files are here:

```sh
export JSALTdir=/work/k.church/JSALT-2023/
cd $JSALTdir/semantic_scholar/releases/2023-06-20/database/papers/authors
```

The simplest way to use these files is this:

```python
import numpy as np
import scipy
f='/tmp/x.npz'
M=scipy.sparse.load_npz(f)
```

M is a sparse boolean matrix, with a 1 in M[i,j] iff paper i was written by paper j.

```python
M.shape
# (259187462, 2220213919)
M.dtype
# dtype('bool')
```

There are nearly 600M nonzero values in M.  Since there are about 200M papers in Semantic Scholar, this
means there are about 3 authors for each paper, on average.

```python
M.count_nonzero()
# 592995277
M.count_nonzero()/1e6
592.995277
```

Note: many of the rows and columns are empty because there are many gaps in Semantic Scholar CorpusIds and authorIds.
CorpusIds are more dense than authorIds.  There are about 260M CorpusIds in M, slightly more than the number of papers (200M).
There are 2B authorIds, but most of them have no papers.  That is, most of the columns in M are empty.

<p>
Suppose we have a CorpusId, 2, and we want to know who wrote that paper.
The following says that paper has 6 authors:

```python
papers,authors = M[2,:].nonzero()
authors
# array([ 1712216,  1720683,  1738575,  1744439,  1790055, 48280839])
```

There is a simple mapping between authorId and URLs on Semantic Scholar:

<ol>
<li><a href="https://www.semanticscholar.org/author/1712216"></a></li>
<li><a href="https://www.semanticscholar.org/author/1720683"></a></li>
<li><a href="https://www.semanticscholar.org/author/1738575"></a></li>
<li><a href="https://www.semanticscholar.org/author/1744439"></a></li>
<li><a href="https://www.semanticscholar.org/author/1790055"></a></li>
<li><a href="https://www.semanticscholar.org/author/48280839"></a></li>
</ol>

>>> papers,authors = M[:,1712216].nonzero()
len(papers)
209
>>> papers[0:10]
array([      2,  237611,  377241,  872899, 1812868, 2079957, 2263609,
       2363214, 2461856, 2499619], dtype=int32)
