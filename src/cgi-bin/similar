#!/usr/bin/env python 

# Import modules for CGI handling 
import cgi, cgitb 

# Create instance of FieldStorage 
form = cgi.FieldStorage() 

# Get data from fields
paper = form.getvalue('CorpusId')
query = form.getvalue('query')
search = form.getvalue('search')
npapers = form.getvalue('limit')
if npapers is None:
    npapers = 20
npapers = int(npapers)

#!/usr/bin/env python

import sys,os,struct,json,requests
import numpy as np

print(sys.argv, file=sys.stderr)
apikey=os.environ.get('SPECTER_API_KEY')

def map_int64(fn):
    fn_len = os.path.getsize(fn)
    return np.memmap(fn, dtype=np.int64, shape=(int(fn_len/8)), mode='r')

bigrams_file = os.environ.get('JSALTdir') + '/semantic_scholar/embeddings/proposed/bigrams'
# bigrams_file = os.environ.get('JSALTdir') + '/semantic_scholar/embeddings/specter2/bigrams'
idx = map_int64(bigrams_file + '.idx')

def id_ify(s):
    if args.search or len(s) == 40 or args.API == 'author':
        return s
    for prefix in ['CorpusId:', 'PMID:', 'ACL:', 'arXiv:', 'DBLP:', 'MAG:', 'PMID:']:
        if s.startswith(prefix):
            return s
    if '/' in s: return s
    return 'CorpusId:' + s

# r = requests.post(
#     'https://api.semanticscholar.org/graph/v1/paper/batch',
#     params={'fields': 'referenceCount,citationCount,title'},
#     json={"ids": ["649def34f8be52c8b66281af98ae884c09aef38b", "ARXIV:2106.15928"]}
# )
# print(json.dumps(r.json(), indent=2))


def fetch_from_semantic_scholar(corpusId):
    try:
        my_api = 'https://api.semanticscholar.org/graph/v1/paper/CorpusId:'
        cmd = my_api + str(corpusId) + '/?fields=title,url'
        j = requests.get(cmd, headers={"x-api-key": apikey}).json()
        print(j, file=sys.stderr)
        return '<a href="%s">%s</a>' % (j['url'], j['title'])
    except:
        return str(corpusId)

def fetch_corpusId(id):
    try:
        cmd = 'https://api.semanticscholar.org/graph/v1/paper/' + str(id) + '/?fields=externalIds'
        j = requests.get(cmd, headers={"x-api-key": apikey}).json()
        print(j, file=sys.stderr)
        return j['externalIds']['CorpusId']
    except:
        return None

def lookup_paper(paper):
    try:
        query = int(paper)
        start = idx[query]
        end = idx[query+1]
        nbytes = 12*(end - start)
        with open(bigrams_file, 'rb') as fd:
            fd.seek(start * 12)
            bytes = fd.read(nbytes)
            res = sorted([record for record in struct.iter_unpack('fii', bytes)], key=lambda rec: rec[0], reverse=True)
            if len(res) > npapers: res = res[0:npapers]
            return res
    except:
        return []

def href_ify(id, hrefs):
    if id in hrefs:
        return hrefs[id]
    else:
        return '<tr><td>NA</td><td>%s</td></tr>' % id

def do_papers(papers):
    print('do_papers: ' + str(papers), file=sys.stderr)
    res = [lookup_paper(paper) for paper in papers]
    ids = [int(p) for p in papers]
    for res1 in res:
        for score, id1, id2 in res1:
            ids.append(id2)
    r = requests.post(
        'https://api.semanticscholar.org/graph/v1/paper/batch',
        params={'fields': 'title,citationCount,url,externalIds'},
        json={"ids": ['CorpusId:' + str(id) for id in ids]},
        headers={"x-api-key": apikey}).json()
    print(r, file=sys.stderr)
    hrefs = {}
    for rec in r:
        print('rec: ' + str(rec), file=sys.stderr)
        if not rec is None and 'externalIds' in rec:
            key = int(rec['externalIds']['CorpusId'])
            val = '<tr><td>%s</td><td><a href="%s">%s</a></td></tr>' % (str(rec['citationCount']), rec['url'], rec['title'])
            hrefs[key] = val
    print('res: ' + str(res), file=sys.stderr)
    print('papers: ' + str(papers), file=sys.stderr)
    for i in range(len(papers)):
        # print('<h2>Input paper: %s; query=%s</h2>' % (papers[i], query))
        # print('<ol>')
        print('<h2>Input paper: %s</h2>' % (href_ify(res[i][0][1], hrefs)))
        print('<table><tr><th>citations</th><th>title</th></tr>')
        for score, id1, id2 in res[i]:
            print(href_ify(id2, hrefs))
        print('</table>')
        # print('</ol>')

def do_paper(paper):
    print("<h2>Input paper: %s; query=%s</h2>" % (paper, query))
    print("<ol>")
    for score, id1, id2 in lookup_paper(paper):
        print("<li>%0.3f %s</li>" % (score, fetch_from_semantic_scholar(id2)))
    print("</ol>")

print("Content-type:text/html\r\n\r\n")
print("<html>")
print("<head>")
print("<title>Similar</title>")
print("</head>")
print("<body>")

if not query is None:
    j = requests.get('https://api.semanticscholar.org/graph/v1/paper/autocomplete?query=' + query, headers={"x-api-key": apikey}).json()
    print('j: ' + str(j), file=sys.stderr)
    ids = [ m['id'] for m in j['matches']]
    print('ids: ' + str(ids), file=sys.stderr)
    r = requests.post(
        'https://api.semanticscholar.org/graph/v1/paper/batch',
        params={'fields': 'externalIds'},
        json={"ids": ids},
        headers={"x-api-key": apikey}).json()
    print(r, file=sys.stderr)
    papers = [ rec['externalIds']['CorpusId'] for rec in r ]
    print('papers: ' + str(papers), file=sys.stderr)
    do_papers(papers)
elif not search is None:
    j = requests.get('https://api.semanticscholar.org/graph/v1/paper/search?query=' + search, headers={"x-api-key": apikey}).json()
    print('j: ' + str(j), file=sys.stderr)
    ids = [ m['paperId'] for m in j['data']]
    print('ids: ' + str(ids), file=sys.stderr)
    r = requests.post(
        'https://api.semanticscholar.org/graph/v1/paper/batch',
        params={'fields': 'externalIds'},
        json={"ids": ids},
        headers={"x-api-key": apikey}).json()
    print(r, file=sys.stderr)
    papers = [ rec['externalIds']['CorpusId'] for rec in r ]
    print('papers: ' + str(papers), file=sys.stderr)
    do_papers(papers)
else:
    do_papers([paper])
print("</ol>")
print("</body>")
print("</html>")


