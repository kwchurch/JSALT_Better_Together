#!/usr/bin/env python

import numpy as np
import sys
from sklearn.preprocessing import normalize
# from sklearn.metrics.pairwise import cosine_similarity
from scipy.linalg import norm

def H(D):
    P = D/np.sum(D)
    logP = np.log(P)
    return np.sum(P * logP)/-np.log(2)

# deciles = np.arange(11)/10
# q = [0.9, 0.95, 0.99, 0.999]

for f in sys.argv[1:]:
    if f.endswith('npz'):
        Z=np.load(f)['embeddings'].astype('float32')
    else:
        Z=np.load(f).astype('float32')

    for i in range(10):
        for j in range(10):
            n,d = Z.shape
            n = int((i+1) * n/10)
            d = int((j+1) * d/10)
            nZ = normalize(Z[0:n,0:d])
            print('\t'.join(map(str, [f, norm(nZ, ord='nuc'), *nZ.shape])))
            # _,D,_ = np.linalg.svd(nZ)
            # print('\t'.join(map(str, [f, np.sum(D), n, d, *Z.shape])))
            # print('#D: ' + ' '.join(map(str, D)))
            sys.stdout.flush()



